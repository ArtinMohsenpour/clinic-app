// =======================
// schema.prisma
// =======================
// # 1) Preview & format
// npx prisma format

// # 2) Generate the client
// npx prisma generate

// # 3) Create and apply a migration in dev
// npx prisma migrate dev --name init_org_profile_docs

// # (Optional) Open Studio to verify
// npx prisma studio

// # --- For production deploys on the server ---
// # After building your app, only apply existing migrations:
// npx prisma migrate deploy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= new enums =========
enum FormFileKind {
  ADMISSION
  CONSENT
  PRE_VISIT
  INSURANCE
  OTHER
}

enum FormAssetRole {
  ATTACHMENT
  IMAGE
}

// --------- RBAC ---------

model Role {
  id    String     @id @default(uuid())
  key   String     @unique
  name  String     @unique
  users UserRole[]

  @@map("role")
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_role")
}

// --------- Auth / Identity ---------

model User {
  id                 String   @id
  name               String
  email              String   @unique
  emailVerified      Boolean  @default(false)
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  phone              String?
  address            String?
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(false) // force change on next login

  // Optional internal code you can use with payroll/exports (keep or remove)
  employeeCode String? @unique

  // Relations
  sessions          Session[]
  accounts          Account[]
  roles             UserRole[]
  profile           Profile?
  branches          UserBranch[] // current branch assignments
  documents         Document[] // HR docs/payslips the user can see
  uploadedDocuments Document[]   @relation("UploadedDocs") // docs this user (admin/HR) uploaded
  auditLogs         AuditLog[]

  // --- NEW: CMS back relations ---
  uploadedAssets   MediaAsset[] @relation("UserUploadedAssets")
  articlesAuthored Article[]    @relation("ArticleAuthor")
  articlesUpdated  Article[]    @relation("ArticleUpdatedBy")

  // NEW:
  newsAuthored News[] @relation("NewsAuthor")
  newsUpdated  News[] @relation("NewsUpdatedBy")

  educationsAuthored Education[] @relation("EducationAuthor")
  educationsUpdated  Education[] @relation("EducationUpdatedBy")

  faqsAuthored Faq[] @relation("FaqAuthor")
  faqsUpdated  Faq[] @relation("FaqUpdatedBy")

  formFilesAuthored FormFile[] @relation("FormFileAuthor")
  formFilesUpdated  FormFile[] @relation("FormFileUpdatedBy")

  branchCmsAuthored BranchCMS[] @relation("BranchCMSAuthor")
  branchCmsUpdated  BranchCMS[] @relation("BranchCMSUpdatedBy")

  servicesAuthored Service[] @relation("ServiceAuthor")
  servicesUpdated  Service[] @relation("ServiceUpdatedBy")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// --------- Profile (self-service & prefs) ---------

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  secondaryEmail String?
  locale         String? // e.g., "fa-IR", "de-DE"
  timezone       String? // e.g., "Europe/Berlin"
  notifyByEmail  Boolean @default(true)
  emergencyName  String?
  emergencyPhone String?

  // Avatars: store original privately; small public thumbnail is optional
  avatarKey      String? // private storage key (original)
  avatarThumbUrl String? // small public CDN URL (optional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- Organization ---------

model Branch {
  id        String       @id @default(uuid())
  key       String       @unique // e.g., "cgn-main"
  name      String // e.g., "Cologne â€” Main"
  city      String?
  address   String?
  timezone  String? // e.g., "Europe/Berlin" (handy for schedules)
  isActive  Boolean      @default(true)
  users     UserBranch[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  news NewsBranch[]
  cms  BranchCMS?

  services ServiceBranch[]

  @@map("branch")
}

model Department {
  id        String       @id @default(uuid())
  key       String       @unique // e.g., "radiology"
  name      String
  isActive  Boolean      @default(true)
  users     UserBranch[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("department")
}

// Which branch/department a user belongs to (can have multiple; pick one primary)
model UserBranch {
  userId       String
  branchId     String
  departmentId String?
  assignedAt   DateTime @default(now())

  // Mark the main placement for quick lookups
  isPrimary Boolean @default(false)

  // Lightweight title without another table (optional)
  positionTitle String?

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch     Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  @@id([userId, branchId])
  @@index([userId])
  @@index([branchId])
  @@index([departmentId])
  @@map("user_branch")
}

// --------- HR Documents ---------

enum DocumentType {
  PAYSLIP
  CONTRACT
  POLICY
  ID_SCAN
  OTHER
}

model Document {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        DocumentType
  title       String
  periodMonth Int? // 1..12 (used for payslips)
  periodYear  Int? // e.g., 2025
  fileKey     String // private storage key/path
  mimeType    String
  size        Int

  uploadedById String
  uploadedBy   User     @relation("UploadedDocs", fields: [uploadedById], references: [id])
  sha256       String? // dedupe/integrity
  createdAt    DateTime @default(now())

  @@unique([userId, type, periodYear, periodMonth]) // prevents duplicate monthly payslips
  @@index([userId, type, periodYear, periodMonth])
  @@map("document")
}

// --------- Auditing ---------

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String // "PROFILE_UPDATE" | "DOC_UPLOAD" | "DOC_DOWNLOAD" | "BRANCH_ASSIGN"
  targetId  String? // e.g., userId or documentId
  meta      Json?
  createdAt DateTime @default(now())

  @@index([actorId, action, createdAt])
  @@map("audit_log")
}

// ---------- Content primitives ----------
enum PublishStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

model MediaAsset {
  id        String  @id @default(uuid())
  fileKey   String  @unique
  publicUrl String?
  alt       String?
  mimeType  String
  size      Int
  width     Int?
  height    Int?

  uploadedById String?
  uploadedBy   User?   @relation("UserUploadedAssets", fields: [uploadedById], references: [id], onDelete: SetNull)

  // NEW: back-relation for Article.cover
  coverOfArticles Article[] @relation("ArticleCover")

  // where this asset is used
  articleMedias ArticleMedia[]

  // NEW:
  coverOfNews    News[]           @relation("NewsCover")
  newsMedias     NewsMedia[]
  educationMedia EducationMedia[]

  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  coverOfEducation Education[] @relation("EducationCover")

  // Forms & Files relations
  formPrimaryOf   FormFile[]      @relation("FormPrimaryFile")
  formPreviewOf   FormFile[]      @relation("FormPreviewImage")
  formAssets      FormFileAsset[]
  // Branch hero + gallery
  branchCmsHeroOf BranchCMS[]     @relation("BranchHero")
  branchMedias    BranchMedia[]

  coverOfServices Service[]      @relation("ServiceCover")
  serviceMedias   ServiceMedia[]

  @@index([uploadedById])
  @@map("media_asset")
}

model Tag {
  id   String @id @default(uuid())
  key  String @unique
  name String @unique

  // m2m
  articleTags ArticleTag[]

  // NEW for news
  newsTags      NewsTag[]
  educationTags EducationTag[]

  faqTags FaqTag[]

  formFileTags FormFileTag[]

  serviceTags ServiceTag[]

  @@map("tag")
}

model Category {
  id   String @id @default(uuid())
  key  String @unique
  name String @unique

  // m2m
  articleCategories   ArticleCategory[]
  // NEW for news
  newsCategories      NewsCategory[]
  educationCategories EducationCategory[]

  faqCategories FaqCategory[]

  formFileCategories FormFileCategory[]

  serviceCategories ServiceCategory[]

  @@map("category")
}

// ---------- Articles ----------
model Article {
  id          String        @id @default(uuid())
  slug        String        @unique
  title       String
  excerpt     String?
  body        Json
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?
  readingMin  Int?

  // Pair with MediaAsset.coverOfArticles
  coverId String?
  cover   MediaAsset? @relation("ArticleCover", fields: [coverId], references: [id], onDelete: SetNull)

  // Pair with User.articlesAuthored
  authorId String
  author   User   @relation("ArticleAuthor", fields: [authorId], references: [id])

  // Pair with User.articlesUpdated
  updatedById String?
  updatedBy   User?   @relation("ArticleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // SEO
  seoTitle       String?
  seoDescription String?

  // taxonomy
  tags       ArticleTag[]
  categories ArticleCategory[]

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  media     ArticleMedia[] // gallery

  @@index([status, publishedAt])
  @@index([createdAt])
  @@map("article")
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tag")
}

model ArticleCategory {
  articleId  String
  categoryId String
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@map("article_category")
}

model ArticleMedia {
  articleId String
  mediaId   String
  order     Int    @default(0) // for manual sorting

  article Article    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  media   MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([articleId, mediaId])
  @@index([articleId, order])
  @@map("article_media")
}

// ---------- News ----------
model News {
  id          String        @id @default(uuid())
  slug        String        @unique
  title       String
  excerpt     String?
  body        Json
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?

  // cover
  coverId String?
  cover   MediaAsset? @relation("NewsCover", fields: [coverId], references: [id], onDelete: SetNull)

  // authorship
  authorId    String
  author      User    @relation("NewsAuthor", fields: [authorId], references: [id])
  updatedById String?
  updatedBy   User?   @relation("NewsUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // taxonomy & media
  tags       NewsTag[]
  categories NewsCategory[]
  media      NewsMedia[]

  branches NewsBranch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, publishedAt])
  @@map("news")
}

model NewsTag {
  newsId String
  tagId  String
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([newsId, tagId])
  @@map("news_tag")
}

model NewsCategory {
  newsId     String
  categoryId String
  news       News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([newsId, categoryId])
  @@map("news_category")
}

model NewsMedia {
  newsId  String
  mediaId String
  order   Int    @default(0)

  news  News       @relation(fields: [newsId], references: [id], onDelete: Cascade)
  media MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([newsId, mediaId])
  @@index([newsId, order])
  @@map("news_media")
}

// -------- Patient Education --------
model Education {
  id          String        @id @default(uuid())
  title       String
  slug        String        @unique
  excerpt     String?
  body        Json
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?
  coverId     String?
  cover       MediaAsset?   @relation("EducationCover", fields: [coverId], references: [id], onDelete: SetNull)

  authorId    String
  author      User    @relation("EducationAuthor", fields: [authorId], references: [id])
  updatedById String?
  updatedBy   User?   @relation("EducationUpdatedBy", fields: [updatedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags       EducationTag[]
  categories EducationCategory[]
  media      EducationMedia[]
}

model EducationTag {
  educationId String
  tagId       String
  education   Education @relation(fields: [educationId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@id([educationId, tagId])
}

model EducationCategory {
  educationId String
  categoryId  String
  education   Education @relation(fields: [educationId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([educationId, categoryId])
}

model EducationMedia {
  educationId String
  mediaId     String
  order       Int    @default(0)

  education Education  @relation(fields: [educationId], references: [id])
  media     MediaAsset @relation(fields: [mediaId], references: [id])

  @@id([educationId, mediaId])
}

// ---------- FAQ ----------
model Faq {
  id          String        @id @default(uuid())
  slug        String        @unique
  question    String
  answer      Json
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?

  // Ordering & pinning (per category UX â€” you can sort by order desc then pinned)
  isPinned Boolean @default(false)
  order    Int     @default(0)

  // Authors
  authorId String
  author   User   @relation("FaqAuthor", fields: [authorId], references: [id])

  updatedById String?
  updatedBy   User?   @relation("FaqUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Taxonomy
  tags       FaqTag[]
  categories FaqCategory[]

  // Simple metrics (optional, handy later)
  views      Int @default(0)
  helpfulYes Int @default(0)
  helpfulNo  Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, publishedAt])
  @@index([order])
  @@map("faq")
}

model FaqTag {
  faqId String
  tagId String

  faq Faq @relation(fields: [faqId], references: [id], onDelete: Cascade)
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([faqId, tagId])
  @@map("faq_tag")
}

model FaqCategory {
  faqId      String
  categoryId String

  faq      Faq      @relation(fields: [faqId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([faqId, categoryId])
  @@map("faq_category")
}

// ========= new models =========
model FormFile {
  id          String        @id @default(uuid())
  title       String
  slug        String        @unique
  description String?
  kind        FormFileKind?
  language    String? // e.g. "fa", "en"
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?

  // Primary downloadable file (pdf/doc/image)
  primaryFileId String?
  primaryFile   MediaAsset? @relation("FormPrimaryFile", fields: [primaryFileId], references: [id], onDelete: SetNull)

  // Optional preview image (thumbnail/cover)
  previewImageId String?
  previewImage   MediaAsset? @relation("FormPreviewImage", fields: [previewImageId], references: [id], onDelete: SetNull)

  // Authorship
  authorId    String
  author      User    @relation("FormFileAuthor", fields: [authorId], references: [id])
  updatedById String?
  updatedBy   User?   @relation("FormFileUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Taxonomy & attachments
  tags       FormFileTag[]
  categories FormFileCategory[]
  assets     FormFileAsset[] // attachments (images, extra docs)

  downloads Int @default(0)

  services ServiceFormFile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, publishedAt])
  @@map("form_file")
}

model FormFileAsset {
  formFileId String
  mediaId    String
  order      Int           @default(0)
  role       FormAssetRole @default(ATTACHMENT)

  form  FormFile   @relation(fields: [formFileId], references: [id], onDelete: Cascade)
  media MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([formFileId, mediaId])
  @@index([formFileId, order])
  @@map("form_file_asset")
}

model FormFileTag {
  formFileId String
  tagId      String
  formFile   FormFile @relation(fields: [formFileId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([formFileId, tagId])
  @@map("form_file_tag")
}

model FormFileCategory {
  formFileId String
  categoryId String
  formFile   FormFile @relation(fields: [formFileId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([formFileId, categoryId])
  @@map("form_file_category")
}

// ========= Branch CMS (public site content per branch) =========
model BranchCMS {
  id       String @id @default(uuid())
  branchId String @unique
  branch   Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  // publishing
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?

  // content
  title    String? // e.g., page H1
  subtitle String?
  body     Json? // e.g., markdown/json AST blocks for the branch page

  // public contact shown on website (separate from Settings.Branch.address/etc.)
  publicAddress  String?
  phonePrimary   String?
  phoneSecondary String?
  emailPublic    String?
  mapUrl         String? // Google Maps or OSM URL
  openingHours   Json? // e.g. [{day:"Sat",open:"08:00",close:"16:00"}, ...]

  // hero & gallery
  heroId String?
  hero   MediaAsset?   @relation("BranchHero", fields: [heroId], references: [id], onDelete: SetNull)
  media  BranchMedia[]

  // audit
  authorId    String
  author      User    @relation("BranchCMSAuthor", fields: [authorId], references: [id])
  updatedById String?
  updatedBy   User?   @relation("BranchCMSUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, publishedAt])
  @@map("branch_cms")
}

model BranchMedia {
  branchCmsId String
  mediaId     String
  order       Int    @default(0)

  cms   BranchCMS  @relation(fields: [branchCmsId], references: [id], onDelete: Cascade)
  media MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([branchCmsId, mediaId])
  @@index([branchCmsId, order])
  @@map("branch_media")
}

// -------- News â†” Branch (many-to-many) -------
model NewsBranch {
  newsId   String
  branchId String

  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@id([newsId, branchId])
  @@index([branchId])
  @@index([newsId])
  @@map("news_branch")
}

model Service {
  id          String        @id @default(uuid())
  slug        String        @unique
  title       String
  subtitle    String?
  excerpt     String?
  body        Json? // rich content blocks/markdown JSON
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?

  // Cover + gallery
  coverId String?
  cover   MediaAsset?    @relation("ServiceCover", fields: [coverId], references: [id], onDelete: SetNull)
  media   ServiceMedia[]

  // Authorship
  authorId    String
  author      User    @relation("ServiceAuthor", fields: [authorId], references: [id])
  updatedById String?
  updatedBy   User?   @relation("ServiceUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Taxonomy
  tags       ServiceTag[]
  categories ServiceCategory[]

  // Where itâ€™s available
  branches ServiceBranch[]

  // Downloadable/intake/consent forms tied to this service (optional)
  forms ServiceFormFile[]

  // UI / listing
  iconKey        String? // e.g. "stethoscope" (for nav/home tiles)
  order          Int     @default(0) // manual sort
  isFeatured     Boolean @default(false)
  bookingEnabled Boolean @default(false) // future

  // Optional structured info
  durationMin   Int?
  priceMin      Int?
  priceMax      Int?
  priceCurrency String? // e.g., "IRR", "EUR"
  preparation   Json? // blocks/markdown JSON
  aftercare     Json? // blocks/markdown JSON

  // SEO
  seoTitle       String?
  seoDescription String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, publishedAt])
  @@index([order])
  @@map("service")
}

model ServiceTag {
  serviceId String
  tagId     String

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([serviceId, tagId])
  @@map("service_tag")
}

model ServiceCategory {
  serviceId  String
  categoryId String

  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([serviceId, categoryId])
  @@map("service_category")
}

model ServiceMedia {
  serviceId String
  mediaId   String
  order     Int    @default(0)

  service Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  media   MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([serviceId, mediaId])
  @@index([serviceId, order])
  @@map("service_media")
}

model ServiceBranch {
  serviceId String
  branchId  String

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  branch  Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@id([serviceId, branchId])
  @@index([branchId])
  @@index([serviceId])
  @@map("service_branch")
}

model ServiceFormFile {
  serviceId  String
  formFileId String

  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  formFile FormFile @relation(fields: [formFileId], references: [id], onDelete: Cascade)

  @@id([serviceId, formFileId])
  @@map("service_form_file")
}
