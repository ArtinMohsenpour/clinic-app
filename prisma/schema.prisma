// =======================
// schema.prisma
// =======================
// # 1) Preview & format
// npx prisma format

// # 2) Generate the client
// npx prisma generate

// # 3) Create and apply a migration in dev
// npx prisma migrate dev --name init_org_profile_docs

// # (Optional) Open Studio to verify
// npx prisma studio

// # --- For production deploys on the server ---
// # After building your app, only apply existing migrations:
// npx prisma migrate deploy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------- RBAC ---------

model Role {
  id    String     @id @default(uuid())
  key   String     @unique
  name  String     @unique
  users UserRole[]

  @@map("role")
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_role")
}

// --------- Auth / Identity ---------

model User {
  id                 String   @id
  name               String
  email              String   @unique
  emailVerified      Boolean  @default(false)
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  phone              String?
  address            String?
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(false) // force change on next login

  // Optional internal code you can use with payroll/exports (keep or remove)
  employeeCode String? @unique

  // Relations
  sessions          Session[]
  accounts          Account[]
  roles             UserRole[]
  profile           Profile?
  branches          UserBranch[] // current branch assignments
  documents         Document[] // HR docs/payslips the user can see
  uploadedDocuments Document[]   @relation("UploadedDocs") // docs this user (admin/HR) uploaded
  auditLogs         AuditLog[]

  // --- NEW: CMS back relations ---
  uploadedAssets   MediaAsset[] @relation("UserUploadedAssets")
  articlesAuthored Article[]    @relation("ArticleAuthor")
  articlesUpdated  Article[]    @relation("ArticleUpdatedBy")

  // NEW:
  newsAuthored News[] @relation("NewsAuthor")
  newsUpdated  News[] @relation("NewsUpdatedBy")

  educationsAuthored Education[] @relation("EducationAuthor")
  educationsUpdated  Education[] @relation("EducationUpdatedBy")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// --------- Profile (self-service & prefs) ---------

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  secondaryEmail String?
  locale         String? // e.g., "fa-IR", "de-DE"
  timezone       String? // e.g., "Europe/Berlin"
  notifyByEmail  Boolean @default(true)
  emergencyName  String?
  emergencyPhone String?

  // Avatars: store original privately; small public thumbnail is optional
  avatarKey      String? // private storage key (original)
  avatarThumbUrl String? // small public CDN URL (optional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------- Organization ---------

model Branch {
  id        String       @id @default(uuid())
  key       String       @unique // e.g., "cgn-main"
  name      String // e.g., "Cologne â€” Main"
  city      String?
  address   String?
  timezone  String? // e.g., "Europe/Berlin" (handy for schedules)
  isActive  Boolean      @default(true)
  users     UserBranch[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("branch")
}

model Department {
  id        String       @id @default(uuid())
  key       String       @unique // e.g., "radiology"
  name      String
  isActive  Boolean      @default(true)
  users     UserBranch[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("department")
}

// Which branch/department a user belongs to (can have multiple; pick one primary)
model UserBranch {
  userId       String
  branchId     String
  departmentId String?
  assignedAt   DateTime @default(now())

  // Mark the main placement for quick lookups
  isPrimary Boolean @default(false)

  // Lightweight title without another table (optional)
  positionTitle String?

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch     Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  @@id([userId, branchId])
  @@index([userId])
  @@index([branchId])
  @@index([departmentId])
  @@map("user_branch")
}

// --------- HR Documents ---------

enum DocumentType {
  PAYSLIP
  CONTRACT
  POLICY
  ID_SCAN
  OTHER
}

model Document {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type        DocumentType
  title       String
  periodMonth Int? // 1..12 (used for payslips)
  periodYear  Int? // e.g., 2025
  fileKey     String // private storage key/path
  mimeType    String
  size        Int

  uploadedById String
  uploadedBy   User     @relation("UploadedDocs", fields: [uploadedById], references: [id])
  sha256       String? // dedupe/integrity
  createdAt    DateTime @default(now())

  @@unique([userId, type, periodYear, periodMonth]) // prevents duplicate monthly payslips
  @@index([userId, type, periodYear, periodMonth])
  @@map("document")
}

// --------- Auditing ---------

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String // "PROFILE_UPDATE" | "DOC_UPLOAD" | "DOC_DOWNLOAD" | "BRANCH_ASSIGN"
  targetId  String? // e.g., userId or documentId
  meta      Json?
  createdAt DateTime @default(now())

  @@index([actorId, action, createdAt])
  @@map("audit_log")
}

// ---------- Content primitives ----------
enum PublishStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

model MediaAsset {
  id        String  @id @default(uuid())
  fileKey   String  @unique
  publicUrl String?
  alt       String?
  mimeType  String
  size      Int
  width     Int?
  height    Int?

  uploadedById String?
  uploadedBy   User?   @relation("UserUploadedAssets", fields: [uploadedById], references: [id], onDelete: SetNull)

  // NEW: back-relation for Article.cover
  coverOfArticles Article[] @relation("ArticleCover")

  // where this asset is used
  articleMedias ArticleMedia[]

  // NEW:
  coverOfNews    News[]           @relation("NewsCover")
  newsMedias     NewsMedia[]
  educationMedia EducationMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coverOfEducation Education[] @relation("EducationCover")

  @@index([uploadedById])
  @@map("media_asset")
}

model Tag {
  id   String @id @default(uuid())
  key  String @unique
  name String @unique

  // m2m
  articleTags ArticleTag[]

  // NEW for news
  newsTags      NewsTag[]
  educationTags EducationTag[]

  @@map("tag")
}

model Category {
  id   String @id @default(uuid())
  key  String @unique
  name String @unique

  // m2m
  articleCategories   ArticleCategory[]
  // NEW for news
  newsCategories      NewsCategory[]
  educationCategories EducationCategory[]

  @@map("category")
}

// ---------- Articles ----------
model Article {
  id          String        @id @default(uuid())
  slug        String        @unique
  title       String
  excerpt     String?
  body        Json
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?
  readingMin  Int?

  // Pair with MediaAsset.coverOfArticles
  coverId String?
  cover   MediaAsset? @relation("ArticleCover", fields: [coverId], references: [id], onDelete: SetNull)

  // Pair with User.articlesAuthored
  authorId String
  author   User   @relation("ArticleAuthor", fields: [authorId], references: [id])

  // Pair with User.articlesUpdated
  updatedById String?
  updatedBy   User?   @relation("ArticleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // SEO
  seoTitle       String?
  seoDescription String?

  // taxonomy
  tags       ArticleTag[]
  categories ArticleCategory[]

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  media     ArticleMedia[] // gallery

  @@index([status, publishedAt])
  @@index([createdAt])
  @@map("article")
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tag")
}

model ArticleCategory {
  articleId  String
  categoryId String
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@map("article_category")
}

model ArticleMedia {
  articleId String
  mediaId   String
  order     Int    @default(0) // for manual sorting

  article Article    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  media   MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([articleId, mediaId])
  @@index([articleId, order])
  @@map("article_media")
}

// ---------- News ----------
model News {
  id          String        @id @default(uuid())
  slug        String        @unique
  title       String
  excerpt     String?
  body        Json
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?

  // cover
  coverId String?
  cover   MediaAsset? @relation("NewsCover", fields: [coverId], references: [id], onDelete: SetNull)

  // authorship
  authorId    String
  author      User    @relation("NewsAuthor", fields: [authorId], references: [id])
  updatedById String?
  updatedBy   User?   @relation("NewsUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // taxonomy & media
  tags       NewsTag[]
  categories NewsCategory[]
  media      NewsMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, publishedAt])
  @@map("news")
}

model NewsTag {
  newsId String
  tagId  String
  news   News   @relation(fields: [newsId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([newsId, tagId])
  @@map("news_tag")
}

model NewsCategory {
  newsId     String
  categoryId String
  news       News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([newsId, categoryId])
  @@map("news_category")
}

model NewsMedia {
  newsId  String
  mediaId String
  order   Int    @default(0)

  news  News       @relation(fields: [newsId], references: [id], onDelete: Cascade)
  media MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([newsId, mediaId])
  @@index([newsId, order])
  @@map("news_media")
}

// -------- Patient Education --------
model Education {
  id          String        @id @default(uuid())
  title       String
  slug        String        @unique
  excerpt     String?
  body        Json
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?
  coverId     String?
  cover       MediaAsset?   @relation("EducationCover", fields: [coverId], references: [id], onDelete: SetNull)

  authorId    String
  author      User    @relation("EducationAuthor", fields: [authorId], references: [id])
  updatedById String?
  updatedBy   User?   @relation("EducationUpdatedBy", fields: [updatedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags       EducationTag[]
  categories EducationCategory[]
  media      EducationMedia[]
}

model EducationTag {
  educationId String
  tagId       String
  education   Education @relation(fields: [educationId], references: [id])
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@id([educationId, tagId])
}

model EducationCategory {
  educationId String
  categoryId  String
  education   Education @relation(fields: [educationId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([educationId, categoryId])
}

model EducationMedia {
  educationId String
  mediaId     String
  order       Int    @default(0)

  education Education  @relation(fields: [educationId], references: [id])
  media     MediaAsset @relation(fields: [mediaId], references: [id])

  @@id([educationId, mediaId])
}
